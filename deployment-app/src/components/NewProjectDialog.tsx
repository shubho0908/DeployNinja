import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { Plus, X } from "lucide-react";
import { useState } from "react";
import { DialogTitle } from "@radix-ui/react-dialog";
import { useAppDispatch, useAppSelector } from "@/redux/hooks";
import { createProject } from "@/redux/api/projectApi";
import { RootState } from "@/app/store";
import toast from "react-hot-toast";

interface NewProjectDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

interface EnvVar {
  key: string;
  value: string;
}

const frameworks = [
  { label: "Next.js", value: "nextjs" },
  { label: "React", value: "react" },
  { label: "Vue", value: "vue" },
  { label: "Nuxt", value: "nuxt" },
  { label: "Svelte", value: "svelte" },
];

const NewProjectDialog = ({ open, onOpenChange }: NewProjectDialogProps) => {
  const [envVars, setEnvVars] = useState<EnvVar[]>([{ key: "", value: "" }]);
  const [projectName, setProjectName] = useState("");
  const [framework, setFramework] = useState<{ name: string } | null>(null); // Updated framework type
  const [rootDirectory, setRootDirectory] = useState("");
  const [buildCommand, setBuildCommand] = useState("");
  const [outputDirectory, setOutputDirectory] = useState("");
  const dispatch = useAppDispatch();
  const { user } = useAppSelector((state: RootState) => state.user);

  const addEnvVar = () => setEnvVars([...envVars, { key: "", value: "" }]);

  const removeEnvVar = (index: number) => setEnvVars(envVars.filter((_, i) => i !== index));

  const updateEnvVar = (index: number, field: keyof EnvVar, value: string) => {
    const newEnvVars = [...envVars];
    newEnvVars[index][field] = value;
    setEnvVars(newEnvVars);
  };

  const handleProjectCreation = async () => {
    if (!user?.id || !framework) return; // Ensure there's a valid user id and framework

    const projectData = {
      id: "",  // Placeholder id, to be generated by the backend
      name: projectName,
      ownerId: user?.id,
      framework: { name: framework.name }, // Correctly pass the framework object
      installCommand: "npm install",
      buildCommand,
      projectRootDir: rootDirectory,
      gitRepoUrl: "https://github.com/username/repo.git", // Placeholder URL
      deployments: [], // Empty array for deployments, or remove if not required
    };

    try {
      await dispatch(createProject(projectData)); // Dispatch the project creation action

      // Show success toast after the project is created
      toast.success("Project created successfully!");
      onOpenChange(false); // Close the dialog after creation
    } catch (error) {
      // Show error toast if something goes wrong
      toast.error("Failed to create project. Please try again.");
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px] max-h-[85vh] overflow-y-auto">
        <DialogTitle>Create New Project</DialogTitle>
        <div className="space-y-6">
          <h2 className="text-2xl font-bold">Create New Project</h2>
          <p className="text-muted-foreground">Deploy your Git repository in a few steps.</p>

          <div className="space-y-4">
            <Label>Project Name</Label>
            <Input
              placeholder="my-awesome-project"
              value={projectName}
              onChange={(e) => setProjectName(e.target.value)}
            />

            <Label>Framework</Label>
            <Select value={framework?.name || ""} onValueChange={(value) => setFramework({ name: value })}>
              <SelectTrigger>
                <SelectValue placeholder="Select framework" />
              </SelectTrigger>
              <SelectContent>
                {frameworks.map((framework) => (
                  <SelectItem key={framework.value} value={framework.value}>
                    {framework.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Label>Root Directory</Label>
            <Input
              placeholder="./"
              value={rootDirectory}
              onChange={(e) => setRootDirectory(e.target.value)}
            />

            <Accordion type="single" collapsible className="w-full">
              <AccordionItem value="build-settings">
                <AccordionTrigger>Build and Output Settings</AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4 pt-4">
                    <Label>Build Command</Label>
                    <Input
                      placeholder="npm run build"
                      value={buildCommand}
                      onChange={(e) => setBuildCommand(e.target.value)}
                    />
                    <Label>Output Directory</Label>
                    <Input
                      placeholder="dist"
                      value={outputDirectory}
                      onChange={(e) => setOutputDirectory(e.target.value)}
                    />
                  </div>
                </AccordionContent>
              </AccordionItem>

              <AccordionItem value="env-vars">
                <AccordionTrigger>Environment Variables</AccordionTrigger>
                <AccordionContent>
                  <div className="space-y-4 pt-4">
                    {envVars.map((envVar, index) => (
                      <div key={index} className="space-y-2">
                        <div className="flex items-center gap-2">
                          <div className="grid grid-cols-2 gap-2 flex-1">
                            <Input
                              placeholder="KEY"
                              value={envVar.key}
                              onChange={(e) => updateEnvVar(index, "key", e.target.value)}
                            />
                            <Input
                              placeholder="VALUE"
                              value={envVar.value}
                              onChange={(e) => updateEnvVar(index, "value", e.target.value)}
                            />
                          </div>
                          {envVars.length > 1 && (
                            <Button variant="ghost" size="icon" onClick={() => removeEnvVar(index)}>
                              <X className="h-4 w-4" />
                            </Button>
                          )}
                        </div>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={addEnvVar}
                      className="mt-2"
                    >
                      <Plus className="mr-2 h-4 w-4" />
                      Add Variable
                    </Button>
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </div>

          <div className="flex justify-end gap-2">
            <Button variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            <Button variant="default" onClick={handleProjectCreation}>
              Deploy
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default NewProjectDialog;
